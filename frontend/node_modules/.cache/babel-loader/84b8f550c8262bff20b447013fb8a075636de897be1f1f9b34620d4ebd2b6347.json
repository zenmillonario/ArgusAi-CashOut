{"ast":null,"code":"// Firebase integration for ArgusAI CashOut notifications\nimport { initializeApp } from 'firebase/app';\nimport { getMessaging, getToken, onMessage } from 'firebase/messaging';\n\n// Your Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDXsZWHiHAhWxZz4TNmonxbG2RD2WNBoqU\",\n  authDomain: \"cashoutai-notifications.firebaseapp.com\",\n  projectId: \"cashoutai-notifications\",\n  storageBucket: \"cashoutai-notifications.firebasestorage.app\",\n  messagingSenderId: \"1077671941650\",\n  appId: \"1:1077671941650:web:a48c3dce4bffa8e897aacb\"\n};\n\n// VAPID key for push notifications\nconst VAPID_KEY = \"BCFwFhta05moYQ1dkY6Q1YjWCkGoOOCopnT19IwCzMP62X7RTKIPXUSV4ZQvWAq93QNJKUpV_1yjt42htBcfLvg\";\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nconst messaging = getMessaging(app);\nclass NotificationService {\n  constructor() {\n    this.token = null;\n    this.isSupported = this.checkSupport();\n  }\n\n  // Check if push notifications are supported\n  checkSupport() {\n    return 'serviceWorker' in navigator && 'PushManager' in window && 'Notification' in window;\n  }\n\n  // Request notification permission\n  async requestPermission() {\n    if (!this.isSupported) {\n      console.log('Push notifications not supported');\n      return false;\n    }\n    try {\n      const permission = await Notification.requestPermission();\n      console.log('Notification permission:', permission);\n      return permission === 'granted';\n    } catch (error) {\n      console.error('Error requesting notification permission:', error);\n      return false;\n    }\n  }\n\n  // Register service worker\n  async registerServiceWorker() {\n    if (!this.isSupported) return false;\n    try {\n      const registration = await navigator.serviceWorker.register('/firebase-messaging-sw.js');\n      console.log('Service Worker registered:', registration);\n      return registration;\n    } catch (error) {\n      console.error('Service Worker registration failed:', error);\n      return false;\n    }\n  }\n\n  // Get FCM token\n  async getNotificationToken() {\n    if (!this.isSupported) return null;\n    try {\n      // Register service worker first\n      const registration = await this.registerServiceWorker();\n      if (!registration) return null;\n\n      // Request permission\n      const hasPermission = await this.requestPermission();\n      if (!hasPermission) return null;\n\n      // Get token\n      const token = await getToken(messaging, {\n        vapidKey: VAPID_KEY,\n        serviceWorkerRegistration: registration\n      });\n      if (token) {\n        console.log('FCM Token:', token);\n        this.token = token;\n        return token;\n      } else {\n        console.log('No registration token available');\n        return null;\n      }\n    } catch (error) {\n      console.error('Error getting FCM token:', error);\n      return null;\n    }\n  }\n\n  // Send token to backend\n  async sendTokenToBackend(token, userId) {\n    try {\n      const response = await fetch(`${process.env.REACT_APP_BACKEND_URL}/api/fcm/register-token`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          token: token,\n          user_id: userId\n        })\n      });\n      if (response.ok) {\n        console.log('Token registered with backend');\n        return true;\n      } else {\n        console.error('Failed to register token with backend');\n        return false;\n      }\n    } catch (error) {\n      console.error('Error sending token to backend:', error);\n      return false;\n    }\n  }\n\n  // Initialize notifications for a user\n  async initializeForUser(userId) {\n    if (!this.isSupported) {\n      console.log('Push notifications not supported');\n      return false;\n    }\n    try {\n      // Get FCM token\n      const token = await this.getNotificationToken();\n      if (!token) return false;\n\n      // Send token to backend\n      const success = await this.sendTokenToBackend(token, userId);\n      if (!success) return false;\n\n      // Listen for foreground messages\n      this.setupForegroundListener();\n      console.log('Notifications initialized successfully');\n      return true;\n    } catch (error) {\n      console.error('Error initializing notifications:', error);\n      return false;\n    }\n  }\n\n  // Setup listener for foreground messages\n  setupForegroundListener() {\n    onMessage(messaging, payload => {\n      console.log('Message received in foreground:', payload);\n\n      // Play WhatsApp-like sound\n      this.playNotificationSound();\n\n      // Show custom notification or use browser's\n      if (Notification.permission === 'granted') {\n        var _payload$notification, _payload$notification2;\n        const notification = new Notification(((_payload$notification = payload.notification) === null || _payload$notification === void 0 ? void 0 : _payload$notification.title) || 'ArgusAI CashOut', {\n          body: ((_payload$notification2 = payload.notification) === null || _payload$notification2 === void 0 ? void 0 : _payload$notification2.body) || 'New notification',\n          icon: '/icon-192x192.png',\n          badge: '/badge-72x72.png',\n          tag: 'argusai-notification',\n          renotify: true,\n          requireInteraction: true,\n          data: payload.data\n        });\n\n        // Handle notification click\n        notification.onclick = () => {\n          window.focus();\n          notification.close();\n          // You can add custom logic here based on payload.data\n        };\n\n        // Auto-close after 5 seconds\n        setTimeout(() => {\n          notification.close();\n        }, 5000);\n      }\n    });\n  }\n\n  // Play WhatsApp-like notification sound\n  playNotificationSound() {\n    try {\n      // Create audio context\n      const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n\n      // WhatsApp-like notification sound (double beep)\n      const createBeep = (frequency, duration, delay = 0) => {\n        return new Promise(resolve => {\n          setTimeout(() => {\n            const oscillator = audioContext.createOscillator();\n            const gainNode = audioContext.createGain();\n            oscillator.connect(gainNode);\n            gainNode.connect(audioContext.destination);\n            oscillator.frequency.value = frequency;\n            oscillator.type = 'sine';\n            gainNode.gain.setValueAtTime(0.1, audioContext.currentTime);\n            gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + duration);\n            oscillator.start(audioContext.currentTime);\n            oscillator.stop(audioContext.currentTime + duration);\n            setTimeout(resolve, duration * 1000);\n          }, delay);\n        });\n      };\n\n      // Play double beep like WhatsApp\n      createBeep(800, 0.15).then(() => {\n        createBeep(600, 0.15);\n      });\n    } catch (error) {\n      console.log('Could not play notification sound:', error);\n    }\n  }\n\n  // Test notification\n  async testNotification() {\n    if (this.token) {\n      try {\n        const response = await fetch(`${process.env.REACT_APP_BACKEND_URL}/api/fcm/test-notification`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            token: this.token\n          })\n        });\n        if (response.ok) {\n          console.log('Test notification sent');\n          return true;\n        } else {\n          console.error('Failed to send test notification');\n          return false;\n        }\n      } catch (error) {\n        console.error('Error sending test notification:', error);\n        return false;\n      }\n    }\n    return false;\n  }\n}\n\n// Create global instance\nconst notificationService = new NotificationService();\n\n// Export for use in React components\nexport default notificationService;\n\n// Export individual functions\nexport const {\n  initializeForUser,\n  testNotification,\n  playNotificationSound,\n  requestPermission\n} = notificationService;","map":{"version":3,"names":["initializeApp","getMessaging","getToken","onMessage","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","VAPID_KEY","app","messaging","NotificationService","constructor","token","isSupported","checkSupport","navigator","window","requestPermission","console","log","permission","Notification","error","registerServiceWorker","registration","serviceWorker","register","getNotificationToken","hasPermission","vapidKey","serviceWorkerRegistration","sendTokenToBackend","userId","response","fetch","process","env","REACT_APP_BACKEND_URL","method","headers","body","JSON","stringify","user_id","ok","initializeForUser","success","setupForegroundListener","payload","playNotificationSound","_payload$notification","_payload$notification2","notification","title","icon","badge","tag","renotify","requireInteraction","data","onclick","focus","close","setTimeout","audioContext","AudioContext","webkitAudioContext","createBeep","frequency","duration","delay","Promise","resolve","oscillator","createOscillator","gainNode","createGain","connect","destination","value","type","gain","setValueAtTime","currentTime","exponentialRampToValueAtTime","start","stop","then","testNotification","notificationService"],"sources":["/app/frontend/src/firebase-config.js"],"sourcesContent":["// Firebase integration for ArgusAI CashOut notifications\nimport { initializeApp } from 'firebase/app';\nimport { getMessaging, getToken, onMessage } from 'firebase/messaging';\n\n// Your Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDXsZWHiHAhWxZz4TNmonxbG2RD2WNBoqU\",\n  authDomain: \"cashoutai-notifications.firebaseapp.com\",\n  projectId: \"cashoutai-notifications\",\n  storageBucket: \"cashoutai-notifications.firebasestorage.app\",\n  messagingSenderId: \"1077671941650\",\n  appId: \"1:1077671941650:web:a48c3dce4bffa8e897aacb\"\n};\n\n// VAPID key for push notifications\nconst VAPID_KEY = \"BCFwFhta05moYQ1dkY6Q1YjWCkGoOOCopnT19IwCzMP62X7RTKIPXUSV4ZQvWAq93QNJKUpV_1yjt42htBcfLvg\";\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nconst messaging = getMessaging(app);\n\nclass NotificationService {\n  constructor() {\n    this.token = null;\n    this.isSupported = this.checkSupport();\n  }\n\n  // Check if push notifications are supported\n  checkSupport() {\n    return 'serviceWorker' in navigator && 'PushManager' in window && 'Notification' in window;\n  }\n\n  // Request notification permission\n  async requestPermission() {\n    if (!this.isSupported) {\n      console.log('Push notifications not supported');\n      return false;\n    }\n\n    try {\n      const permission = await Notification.requestPermission();\n      console.log('Notification permission:', permission);\n      return permission === 'granted';\n    } catch (error) {\n      console.error('Error requesting notification permission:', error);\n      return false;\n    }\n  }\n\n  // Register service worker\n  async registerServiceWorker() {\n    if (!this.isSupported) return false;\n\n    try {\n      const registration = await navigator.serviceWorker.register('/firebase-messaging-sw.js');\n      console.log('Service Worker registered:', registration);\n      return registration;\n    } catch (error) {\n      console.error('Service Worker registration failed:', error);\n      return false;\n    }\n  }\n\n  // Get FCM token\n  async getNotificationToken() {\n    if (!this.isSupported) return null;\n\n    try {\n      // Register service worker first\n      const registration = await this.registerServiceWorker();\n      if (!registration) return null;\n\n      // Request permission\n      const hasPermission = await this.requestPermission();\n      if (!hasPermission) return null;\n\n      // Get token\n      const token = await getToken(messaging, {\n        vapidKey: VAPID_KEY,\n        serviceWorkerRegistration: registration\n      });\n\n      if (token) {\n        console.log('FCM Token:', token);\n        this.token = token;\n        return token;\n      } else {\n        console.log('No registration token available');\n        return null;\n      }\n    } catch (error) {\n      console.error('Error getting FCM token:', error);\n      return null;\n    }\n  }\n\n  // Send token to backend\n  async sendTokenToBackend(token, userId) {\n    try {\n      const response = await fetch(`${process.env.REACT_APP_BACKEND_URL}/api/fcm/register-token`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          token: token,\n          user_id: userId\n        })\n      });\n\n      if (response.ok) {\n        console.log('Token registered with backend');\n        return true;\n      } else {\n        console.error('Failed to register token with backend');\n        return false;\n      }\n    } catch (error) {\n      console.error('Error sending token to backend:', error);\n      return false;\n    }\n  }\n\n  // Initialize notifications for a user\n  async initializeForUser(userId) {\n    if (!this.isSupported) {\n      console.log('Push notifications not supported');\n      return false;\n    }\n\n    try {\n      // Get FCM token\n      const token = await this.getNotificationToken();\n      if (!token) return false;\n\n      // Send token to backend\n      const success = await this.sendTokenToBackend(token, userId);\n      if (!success) return false;\n\n      // Listen for foreground messages\n      this.setupForegroundListener();\n\n      console.log('Notifications initialized successfully');\n      return true;\n    } catch (error) {\n      console.error('Error initializing notifications:', error);\n      return false;\n    }\n  }\n\n  // Setup listener for foreground messages\n  setupForegroundListener() {\n    onMessage(messaging, (payload) => {\n      console.log('Message received in foreground:', payload);\n\n      // Play WhatsApp-like sound\n      this.playNotificationSound();\n\n      // Show custom notification or use browser's\n      if (Notification.permission === 'granted') {\n        const notification = new Notification(\n          payload.notification?.title || 'ArgusAI CashOut',\n          {\n            body: payload.notification?.body || 'New notification',\n            icon: '/icon-192x192.png',\n            badge: '/badge-72x72.png',\n            tag: 'argusai-notification',\n            renotify: true,\n            requireInteraction: true,\n            data: payload.data\n          }\n        );\n\n        // Handle notification click\n        notification.onclick = () => {\n          window.focus();\n          notification.close();\n          // You can add custom logic here based on payload.data\n        };\n\n        // Auto-close after 5 seconds\n        setTimeout(() => {\n          notification.close();\n        }, 5000);\n      }\n    });\n  }\n\n  // Play WhatsApp-like notification sound\n  playNotificationSound() {\n    try {\n      // Create audio context\n      const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n      \n      // WhatsApp-like notification sound (double beep)\n      const createBeep = (frequency, duration, delay = 0) => {\n        return new Promise((resolve) => {\n          setTimeout(() => {\n            const oscillator = audioContext.createOscillator();\n            const gainNode = audioContext.createGain();\n            \n            oscillator.connect(gainNode);\n            gainNode.connect(audioContext.destination);\n            \n            oscillator.frequency.value = frequency;\n            oscillator.type = 'sine';\n            \n            gainNode.gain.setValueAtTime(0.1, audioContext.currentTime);\n            gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + duration);\n            \n            oscillator.start(audioContext.currentTime);\n            oscillator.stop(audioContext.currentTime + duration);\n            \n            setTimeout(resolve, duration * 1000);\n          }, delay);\n        });\n      };\n      \n      // Play double beep like WhatsApp\n      createBeep(800, 0.15).then(() => {\n        createBeep(600, 0.15);\n      });\n      \n    } catch (error) {\n      console.log('Could not play notification sound:', error);\n    }\n  }\n\n  // Test notification\n  async testNotification() {\n    if (this.token) {\n      try {\n        const response = await fetch(`${process.env.REACT_APP_BACKEND_URL}/api/fcm/test-notification`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            token: this.token\n          })\n        });\n\n        if (response.ok) {\n          console.log('Test notification sent');\n          return true;\n        } else {\n          console.error('Failed to send test notification');\n          return false;\n        }\n      } catch (error) {\n        console.error('Error sending test notification:', error);\n        return false;\n      }\n    }\n    return false;\n  }\n}\n\n// Create global instance\nconst notificationService = new NotificationService();\n\n// Export for use in React components\nexport default notificationService;\n\n// Export individual functions\nexport const {\n  initializeForUser,\n  testNotification,\n  playNotificationSound,\n  requestPermission\n} = notificationService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}