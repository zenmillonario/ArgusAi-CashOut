<analysis>
The previous AI engineer successfully brought the ArgusAI CashOut application from an initial corrupted state to a fully functional, enhanced trading platform. The work trajectory highlights a systematic approach to problem-solving, starting with repository setup and environment debugging, then progressing to iterative feature development. Key challenges included re-cloning the correct repository, resolving complex preview environment routing issues (involving Nginx, Supervisor, and React environment variables), and debugging frontend-backend communication. The engineer demonstrated strong debugging skills by methodically identifying and rectifying issues related to file system watchers, CORS, and API routing. Subsequent enhancements involved significant full-stack modifications for chat UI, gamification (achievements, referral system with admin approval), and a comprehensive notification system, showcasing a breadth of development capabilities. The engineer consistently confirmed functionality through testing and engaged the user for feedback and clarification, ensuring alignment with product goals.
</analysis>

<product_requirements>
The user's core problem was to obtain a fresh, working copy of the ArgusAI-CashOut trading platform from GitHub, as previous attempts by other agents resulted in corrupted files. Once the base application was verified as working, the user requested several enhancements:
1.  **Repository Setup & Verification**: Clone  to , ensure it's fully working with  credentials, and address any environment/preview issues.
2.  **Chat UI Enhancement**: Redesign the user list on the chat tab for mobile devices to be a sliding panel within the chat area, ensuring the message input remains visible. This also involved fixing desktop layout issues, proper scrolling, and eliminating excessive spacing.
3.  **Achievement System Augmentation**:
    *   Add new achievements for membership duration (3, 8, 12 months).
    *   Implement a referral system where a referrer earns a Referral Master achievement and is eligible for a cash prize (up to 00) when a new member signs up using their code.
    *   The cash prize must be triggered by an admin after review.
    *   Update the Referral Master achievement description to prominently display the cash prize.
4.  **Notification System Expansion**:
    *   Users should receive notifications when someone follows them and when someone replies to their messages.
    *   Ability to mark notifications as read.
    *   Additional notification scenarios were suggested and implemented (reactions, achievements, cash prizes, level-ups, mentions).
    *   The mark as read functionality was updated to auto-mark as read when viewed as per user's preference.
</product_requirements>

<key_technical_concepts>
-   **Full-Stack Architecture**: React (frontend), FastAPI (backend), MongoDB (database).
-   **Deployment & Environment**: Kubernetes container, Supervisor for service management, Nginx for reverse proxy.
-   **Web Technologies**: RESTful APIs, WebSockets (for real-time chat/notifications), Tailwind CSS for styling.
-   **Data Management**: MongoDB operations, Pydantic models for data validation.
-   **Authentication & Authorization**: User registration, login, admin roles.
-   **System Utilities**: Git for version control,  for kernel parameters (file watch limits).
</key_technical_concepts>

<code_architecture>
The application follows a standard full-stack structure with separate  and  directories.



-   **/app/backend/server.py**:
    -   **Summary**: The core FastAPI backend application. Manages API endpoints, database interactions with MongoDB, user authentication, chat logic, achievement system, referral system, and notification handling.
    -   **Changes**:
        -   Defined  dictionary to include new Team Player - 3/8/12 Months and Referral Master achievements, including  for the latter.
        -   Modified  and  Pydantic models to include fields for , , , .
        -   Updated  and  functions to incorporate new achievement logic for membership duration and referrals.
        -   Implemented  to generate and track referral codes.
        -   Added new API endpoints:
            -   : For admin to approve/reject referral cash prizes, including setting custom amounts and notes.
            -   : For admins to view pending cash prize reviews.
            -   : To view a user's referral code and referred users.
        -   Enhanced notification system by adding:
            -   Reply notifications ().
            -   Reaction notifications (added , , ).
            -   Achievement, cash prize, and level-up notifications.
            -   Mention notifications ( function).
        -   Modified  to handle new achievement types.
        -   Adjusted logging and error handling.
-   **/app/frontend/src/App.js**:
    -   **Summary**: The main React component that handles routing, global state, and renders different tabs (including chat). It coordinates data flow between components.
    -   **Changes**:
        -   Passed  state and  function to  and  for coordinated mobile UI.
        -   Modified  logic to prevent auto-scrolling when  is true.
        -   Restructured chat layout to separate chat messages and user list into columns, with message input fixed at the bottom.
        -   Integrated a separate  component.
        -   Moved the mobile chat header with the user list toggle button from  to  for better control over visibility and positioning.
        -   Added the mobile user list overlay at  level to ensure fixed positioning relative to the viewport.
-   **/app/frontend/src/ChatTab.js**:
    -   **Summary**: Displays the chat messages, handles message sending, image uploads, and reactions.
    -   **Changes**:
        -   Removed local  state; now receives  and  as props.
        -   Adjusted height calculation for chat messages area (e.g., ) to prevent overlap with the fixed message input.
        -   Conditional rendering for message input (now handled by  component) based on  prop.
        -   Removed the mobile header and user list components as they are now handled in .
        -   Adjusted flex properties to eliminate excess space between chat messages and input.
        -   Ensured  import was present.
-   **/app/frontend/src/UserList.js**:
    -   **Summary**: Displays the list of online and offline users.
    -   **Changes**:
        -   Removed the 10-user limit on offline users for mobile view.
        -   Added proper height constraints and a bottom border to make it scrollable on desktop.
-   **/app/frontend/src/ChatInput.js**:
    -   **Summary**: A newly created component to encapsulate the message input, image upload, and send button logic.
    -   **Changes**:
        -   New file created to separate out the message input UI and logic from .
-   **/app/frontend/.env**:
    -   **Summary**: Environment variables for frontend configuration.
    -   **Changes**:
        -   Added  and  to resolve file watch and host header validation issues in the preview environment.
        -    was modified multiple times during debugging; its final desired state is  (as set by the testing agent to resolve preview issues).
-   **/app/frontend/package.json**:
    -   **Summary**: Defines frontend dependencies and scripts.
    -   **Changes**:
        -   Added  during debugging to route API calls for React development server. This was later deemed ineffective and changed.
-   **/app/nginx.conf**:
    -   **Summary**: Nginx configuration for serving frontend assets and proxying backend API requests.
    -   **Changes**:
        -   Updated  to point to  (after ).
        -   Adjusted  port from 8080 to 80 during debugging to align with preview proxy expectations.
        -   Fixed  path issue.
-   **/app/Dockerfile & /app/entrypoint.sh**:
    -   **Summary**: Docker container build instructions and startup script.
    -   **Changes**:
        -   No explicit code changes were made to these files by the AI engineer, but they were analyzed to understand the deployment environment and troubleshoot routing issues (e.g., Nginx not running). The engineer needed to manually install Nginx as it was missing from the environment.
</code_architecture>

<pending_tasks>
-   Complete the implementation of Auto-Mark as Read When Viewed for notifications in the frontend.
</pending_tasks>

<current_work>
The immediate work being carried out is implementing the user's request to change the notification mark as read behavior from manual to auto-mark as read when viewed. This involves modifying the frontend's  (and potentially  or a new utility file) to automatically trigger the mark as read API call () as soon as a notification is displayed or viewed by the user, rather than requiring a manual click. The backend support for this feature, including the  endpoint, is already in place. The AI engineer received the explicit instruction Option 2 which refers to Auto-Mark as Read When Viewed. The last observed action was Edit was successful. in response to the plan to implement this. This suggests a backend modification or initial frontend adjustment has been made, but the full frontend logic for triggering this behavior upon view is likely still pending.
</current_work>

<optional_next_step>
Complete the frontend implementation of auto-mark as read when viewed for notifications.
</optional_next_step>
